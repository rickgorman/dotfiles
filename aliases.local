#!/bin/bash

echo "*** now executing aliases.local"

########################
#  Package Mgmt        #
########################

alias bbd="brew bundle dump --force"

########################
#  Alias Controls      #
########################
alias ba='$VISUAL ~/dotfiles-local/aliases.local --wait && source ~/dotfiles-local/aliases.local && rcup'
alias src='source ~/dotfiles-local/aliases.local'

########################
#  Random              #
########################
alias weather="curl wttr.in/?uF"
alias wtr="weather"
alias cheat="curl cht.sh"

# lock the screen
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

alias yuri="Say -v Yuri"

########################
#  Navigation          #
########################
alias .='pwd'
alias ...='cd ../../'
alias ....='cd ../../../'
alias back='cd -'
alias up='cd ..'

alias sl="ls"
alias ls="ls -G"

# list all files colorized in long format
alias ll='ls -laAF'

# print all path entries, one per line
alias path='echo -e ${PATH//:/\\n}'

# specific directory shortcuts
alias home='cd ~'
alias dotfiles='cd ~/dotfiles'
alias work='cd ~/work'
alias web='cd ~/work/web'
alias extension='cd ~/work/extension'

########################
#  Utilities           #
########################

# Intuitive map function
# For example, to list all directories that contain a certain file:
# find . -name .gitattributes | map dirname
alias map="xargs -n1"

# Sum function - adds a series of numbers
# ex:  echo "1 2 3" | sum => 6
alias sum="jq -s 'add'"

# Slice function - extracts columns from output
# ex:  ls -l | slice 5 9  => 9577 awesomefile.txt
slice() {
  AWK_PARAMS=`echo "$@" | sed 's/\([0-9]*\)/\\\$\1" "/g'`
  awk "{print $AWK_PARAMS}"
}

# Cutting functions
alias c1="awk '{print \$1}'"
alias c2="awk '{print \$2}'"
alias c3="awk '{print \$3}'"
alias c4="awk '{print \$4}'"
alias c5="awk '{print \$5}'"
alias c6="awk '{print \$6}'"
alias c7="awk '{print \$7}'"
alias c8="awk '{print \$8}'"
alias c9="awk '{print \$9}'"
alias c10="awk '{print \$10}'"
alias c11="awk '{print \$11}'"
alias c12="awk '{print \$12}'"
alias c13="awk '{print \$13}'"

# clipboard interaction
alias c="pbcopy"
alias p="pbpaste"

########################
#  Better tools        #
########################

man() {
  env MANPAGER="sh -c 'col -bx | bat -l man -p'" /usr/bin/man "$@"
}

########################
#  Git                 #
#################ß######
alias gad='git add . && git status'
alias gr='git reset HEAD --'
alias gcm='git commit -m'
alias gco='git checkout'
alias gc-='git checkout -'
alias gs='git status'
alias ga='git add'
alias gd='git diff --ignore-all-space'
alias gp='git push'
alias gds='git diff --staged --ignore-all-space'
alias gpushom='git push origin ${MASTER_BRANCH_NAME}'
alias gpullom='git pull origin ${MASTER_BRANCH_NAME}'
alias gsl='git stash list'
alias gf='git fetch'
alias gfa='git fetch --all'
alias nb='git checkout -b'
alias gcp='git cherry-pick'
alias gl="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gcompare="git log --left-right --graph --cherry-pick --oneline"
alias gsp="git stash pop"
alias gssp='git stash show -p'
alias grc='git rebase --continue'
alias grs='git rebase --skip'
alias gbg='git bisect good'
alias gbb='git bisect bad'
alias grim='git rebase -i ${MASTER_BRANCH_NAME}'
alias main='git checkout main && g pull'

# reset schema/structure files
alias grss='git checkout HEAD db/schema.read-only.rb; git checkout HEAD db/structure.sql'

# prune stale local branches in a rather destructive way
gpruneomg () {
  git fetch -p

  echo "# WARNING: CLOSING THIS EDITOR WILL FORCEFULLY REMOVE THESE LOCAL BRANCHES" >  /tmp/branches_to_prune.txt
  echo "#"                                                                          >> /tmp/branches_to_prune.txt
  echo "# Please be sure to remove entries that you do not wish to prune. "         >> /tmp/branches_to_prune.txt
  echo "# Recovery will be full of pain and regret."                                >> /tmp/branches_to_prune.txt
  echo "\n"                                                                         >> /tmp/branches_to_prune.txt

  branches=`git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == "[gone]" {sub("refs/heads/", "", $1); print $1}'`

  echo $branches | while read -r branch
  do
    echo "branch -D $branch" >> /tmp/branches_to_prune.txt
  done

  $VISUAL /tmp/branches_to_prune.txt --wait

  cat /tmp/branches_to_prune.txt | grep -v "#" | xargs -L 1 git
}

########################
# Ruby                 #
########################

update_ruby_version() {
  if ! command -v asdf &> /dev/null; then
    echo "Error: asdf is not installed or not in the PATH."
    return 1
  fi

  if [[ ! -f .ruby-version ]]; then
    echo "Error: .ruby-version not found. You're in the wrong directory, dude."
    return 1
  fi

  ruby_version=$(cat .ruby-version | sed 's/^ruby-//')

  echo "running asdf plugin update ruby..."
  asdf plugin update ruby

  echo "running asdf install ruby $ruby_version..."
  if ! asdf install ruby "$ruby_version"; then
    echo "Error: Failed to install Ruby version $ruby_version with asdf."
    return 1
  fi

  # Step 6: Set the local Ruby version
  asdf local ruby "$ruby_version"

  # Step 7: Set the global Ruby version
  asdf global ruby "$ruby_version"

  echo "Ruby version $ruby_version installed and set (local and global)."
}

########################
# Rails                #
########################
alias rails='rails'
alias sp='RAILS_ENV=test rails parallel:spec'
alias sr='RECORD_RUNTIME=true RAILS_ENV=test rails parallel:spec'
alias sof='RAILS_ENV=test bin/rspec --only-failures'

########################
#  Bundle              #
########################
alias be='~/.asdf/shims/bundle exec'
alias ber='be bin/rspec'
alias beg='be guard -P livereload'
alias brc='be rails c'
alias brs='be rails s'
alias brdm='be rails db:migrate'
alias brdbm='brdm'
alias brdbmr='be rails db:migrate; be rails db:rollback'
alias brdbr='be rails db:drop RAILS_ENV=test && be rails db:create RAILS_ENV=test && be rails db:migrate RAILS_ENV=test'
alias brr='be rails routes | fzf'

########################
#  Database            #
########################

########################
#  Heroku              #
########################
#CURRENT_BRANCH=`git rev-parse --abbrev-ref HEAD`
#alias gph='git push heroku $CURRENT_BRANCH:master'
alias h='heroku run'

#######################
# Github              #
#######################

newpr () {
  local BASE_BRANCH="${MASTER_BRANCH_NAME}"

  if [ -n "$1" ]; then
    BASE_BRANCH=$1
  fi

  # Create a temporary file to hold the commit log in Markdown format.
  local TEMP_FILE=$(mktemp)

  # Capture commit logs into the temporary file with Markdown formatting.
  git log "${BASE_BRANCH}..HEAD" --pretty=format:"%s%n---%n%b%n%n" > "${TEMP_FILE}"

  # Create the PR using the temporary file as the body, formatted in Markdown.
  gh pr create --fill -B "${BASE_BRANCH}" --body-file "${TEMP_FILE}" && gh pr ready --undo && gh pr view --web

  # Clean up the temporary file.
  rm "${TEMP_FILE}"
}

alias watchchecks="if sleep 4 && gh pr checks --watch -i 1 && sleep 2 && gh pr checks --watch -i 1; then yuri 'yuri says, ready for merge'; else yuri 'yuri says, no code for you, get new job'; circleci open; fi"
alias ready="gh pr ready && gh pr edit --add-reviewer FlorenceHC/hedgehog"
alias rdy="ready"
alias checks="i18n-tasks health && i18n-tasks normalize && rubocop -a"

#################################
#  Killing / Restarting Things  #
#################################

alias flushdns='sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder;echo "✌️  DNS flushed"'
alias k9postgres='brew services stop postgresql@14; k9 postgres; brew services start postgresql@14'
alias k9puma='k9 puma; k9 puma-dev; k9 puma; k9 puma-dev'

docker_restart() {
  echo "Fetching running container IDs..."
  # Get an array of running container IDs
  ids=($(docker ps -q))

  if [ ${#ids[@]} -gt 0 ]; then
    echo "Found running containers: ${ids[*]}"
    # Iterate over each container ID and handle in parallel
    for id in "${ids[@]}"; do
      {
        echo "Stopping container $id..."
        docker stop "$id"
        if [ $? -eq 0 ]; then
          echo "Container $id stopped successfully."
        else
          echo "Failed to stop container $id."
          continue
        fi

        # Adding a short delay to ensure the container stops properly
        sleep 2

        echo "Starting container $id..."
        docker start "$id"
        if [ $? -eq 0 ]; then
          echo "Container $id started successfully."
        else
          echo "Failed to start container $id."
        fi
      } & # Run each block in the background
    done

    # Wait for all background jobs to finish
    wait
    echo "All containers have been restarted."
  else
    echo "No running containers to restart."
  fi
}

k9() { ps -ef | grep -v grep | grep "$1" | awk '{print $2}' | xargs kill -9 }

######################
# Depoliticize tools #
######################

i18n() {
  i18n-tasks "$@" 2>/dev/null
}

#################
# Video editing #
#################

ffmpeg_two_pass() {
  local input_file="$1"
  local base_name="${input_file%.*}"
  local temp_output="${base_name}_temp.mp4"
  local final_output="${base_name}_pass_2.mp4"
  local temp_files=("ffmpeg2pass-0.log" "ffmpeg2pass-0.log.mbtree")

  # First pass
  ffmpeg -i "$input_file" -pass 1 -r 15 -c:v h264 -c:a aac -b:v 200k -strict normal "$temp_output"

  # Second pass
  ffmpeg -i "$temp_output" -pass 2 -r 15 -c:v h264 -c:a aac -b:v 100k -strict normal "$final_output"

  # Clean up temporary files
  rm "$temp_output"
  for temp_file in "${temp_files[@]}"; do
    [ -f "$temp_file" ] && rm "$temp_file"
  done

  echo "Processing complete. Output file: $final_output"
}
